# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: docker

variables:
  DOCKER_HOST: tcp://docker:2375
  # This will instruct Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""

# Docker services
services:
  - docker:dind

cache:
  paths:
    - node_modules/

stages:
  - build
  - test
  - deploy

# Always build a dev image. This container will be used in follow up jobs.
build:
  stage: build
  script:
    - docker run --rm -w /srv/app -v $(pwd):/srv/app node:10-alpine yarn install
    - docker run --rm -w /srv/app -v $(pwd):/srv/app node:10-alpine yarn build
    - docker build . -t {{cookiecutter.docker_image_name}}:local
    - docker save {{cookiecutter.docker_image_name}}:local | gzip > {{cookiecutter.service_name}}_image.tar.gz
  artifacts:
    paths:
      - {{cookiecutter.service_name}}_image.tar.gz

# Use the dev image with the repo mounted to perform tests.
test:
  stage: test
  dependencies:
    - build
  before_script:
    - docker load --input {{cookiecutter.service_name}}_image.tar.gz
    - chown 1000:1000 -R ./
    - docker run --rm -v $(pwd):/srv/app {{cookiecutter.docker_image_name}}:local yarn install
  script:
    - docker run --rm -v $(pwd):/srv/app {{cookiecutter.docker_image_name}}:local yarn test
  artifacts:
    paths:
      - coverage/

# When this is a build on the master branch, tag the image with :latest
# and push it to the image repository.
deploy:master:
  stage: deploy
  dependencies:
    - build
  before_script:
    - docker load --input {{cookiecutter.service_name}}_image.tar.gz
    - mkdir -p ~/.docker
    - echo $DOCKER_ACCESS_CONFIG > ~/.docker/config.json
  script:
    - docker tag {{cookiecutter.docker_image_name}}:local {{cookiecutter.docker_image_name}}:latest
    - docker push {{cookiecutter.docker_image_name}}:latest
  only:
    - master


# When this is a build on the dev branch, tag the image with :edge
# and push it to the image repository.
deploy:edge:
  stage: deploy
  dependencies:
    - build
  before_script:
    - docker load --input {{cookiecutter.service_name}}_image.tar.gz
    - mkdir -p ~/.docker
    - echo $DOCKER_ACCESS_CONFIG > ~/.docker/config.json
  script:
    - docker tag {{cookiecutter.docker_image_name}}:local {{cookiecutter.docker_image_name}}:edge
    - docker push {{cookiecutter.docker_image_name}}:edge
  only:
    - dev